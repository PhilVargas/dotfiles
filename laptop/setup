#!/usr/bin/env bash
#-------------------------------------------------------------
# Preamble
#-------------------------------------------------------------
LOCAL_DOTFILES="$HOME/dotfiles"

function getc() {
  IFS= read -r -n1 -d '' "$@"
}

function step() {
  echo && echo $1
}

function substep() {
  echo "    $1"
}

#-------------------------------------------------------------
# Install Xcode command line tools
#-------------------------------------------------------------
step "Checking for command line tools..."
loc="$(xcode-\select -p 2> /dev/null)"
if [[ $loc =~ "Xcode.app" ]]; then
  substep "Command line tools are already installed. Skipping."
else
  substep "Installing the Command Line Tools (expect a GUI popup):"
  xcode-\select --install
  substep "Press any key when the installation has completed."
  getc
  sudo xcodebuild -license
fi

#-------------------------------------------------------------
# Install Homebrew
#-------------------------------------------------------------
step "Checking for up-to-date- Homebrew installation..."

loc="$(which brew 2> /dev/null)"
if [[ $loc =~ "brew" ]]; then
  substep "brew is already installed.. Updating..."
  brew update
else
  substep "Installing Homebrew"
  cd
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi


#-------------------------------------------------------------
# Install Git
#-------------------------------------------------------------
step "Installing git command line tools"

loc="$(git --exec-path 2> /dev/null)"
if [[ $loc =~ "git" ]]; then
  substep "git is already installed. Proceeding to next step..."
else
  brew install git
fi

#-------------------------------------------------------------
# Install dotfiles
#-------------------------------------------------------------
step "Installing dotfiles"
if [ -d $LOCAL_DOTFILES ]; then
  substep "Dotfiles already installed. Proceeding to next step..."
else
  git clone https://github.com/PhilVargas/dotfiles.git $LOCAL_DOTFILES
fi

#-------------------------------------------------------------
# Install dev tools
#-------------------------------------------------------------
source $LOCAL_DOTFILES/shell/helpers.sh

step "Installing dev packages"
substep " - Installing postgres"
brew_install_or_upgrade 'postgres'

substep " - Installing redis"
brew_install_or_upgrade 'redis'

substep " - Installing the silver searcher"
brew_install_or_upgrade 'the_silver_searcher'

substep " - Installing vim"
brew_install_or_upgrade 'vim'

substep " - Installing ctags"
brew_install_or_upgrade 'ctags'

# substep " - Installing imagemagick"
# brew_install_or_upgrade 'imagemagick'

substep " - Installing node"
brew_install_or_upgrade 'node'

substep " - Installing libyaml"
brew_install_or_upgrade 'libyaml'

substep " - Installing cmake"
brew_install_or_upgrade 'cmake'

#-------------------------------------------------------------
# Installing RVM
#-------------------------------------------------------------
step "Installing rvm"
if [[ -s "$HOME/.rvm/scripts/rvm" ]]; then
  substep "rvm is already installed. Skipping..."
else
  \curl -sSL https://get.rvm.io | bash -s stable --rails --ignore-dotfiles
fi

#-------------------------------------------------------------
# Installing NVM
#-------------------------------------------------------------
step "Installing nvm"
if [[ -d "$HOME/.nvm" ]]; then
  substep "nvm is already installing. Skipping..."
else
  git clone https://github.com/creationix/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`
  exec $SHELL -l
  cd
fi

#-------------------------------------------------------------
# Installing Yarn
#-------------------------------------------------------------
step "Installing yarn"
loc="$(which yarn 2> /dev/null)"
if [[ $loc =~ "yarn" ]]; then
  substep "yarn is already installed. Proceeding to next step..."
else
npm install --global yarn
fi

#-------------------------------------------------------------
# Installing ruby gems
#-------------------------------------------------------------
step "Installing useful ruby gems"

ruby_gems=(
  bundler
  rubygems-update
  gem-ctags
  rubocop
  pg
)
for gem in ${ruby_gems[*]}; do
  substep "Installing ruby gem: $gem" && echo
  gem install $gem
done

#-------------------------------------------------------------
# Symlinks
#-------------------------------------------------------------
# add option to keep simlink if already present
step "Setting up simlink files"

substep "Linking linters"

substep " - Linking eslint"
rm -f $HOME/.eslintrc
ln -s $LOCAL_DOTFILES/linters/eslintrc $HOME/.eslintrc

substep "Linking config files"

substep " - Linking global gitignore"
rm -f $HOME/.gitingnore_global
ln -s $LOCAL_DOTFILES/gitignore_global $HOME/.gitignore_global

substep " - Linking gitconfig"
rm -f $HOME/.gitconfig
ln -s $LOCAL_DOTFILES/gitconfig $HOME/.gitconfig

substep " - Linking inputrc"
rm -f $HOME/.inputrc
ln -s $LOCAL_DOTFILES/inputrc $HOME/.inputrc

substep " - Linking rspec config"
rm -f $HOME/.rspec
ln -s $LOCAL_DOTFILES/rspec $HOME/.rspec

substep " - Linking vim bundles"
rm -f $HOME/.vimrc.bundles
ln -s $LOCAL_DOTFILES/vimrc.bundles $HOME/.vimrc.bundles

substep " - Linking vimrc"
rm -f $HOME/.vimrc
ln -s $LOCAL_DOTFILES/vimrc $HOME/.vimrc

substep " - Linking bash profile"
rm -f $HOME/.bash_profile
ln -s $LOCAL_DOTFILES/bash_profile $HOME/.bash_profile

substep "Linking directories"

substep " - Linking vim"
rm -f $HOME/.vim
ln -s $LOCAL_DOTFILES/vim $HOME/.vim

#-------------------------------------------------------------
# Vundle
#-------------------------------------------------------------
step "Setting up Vundle files"
if [[ -s "~/.vim/bundle/Vundle.vim" ]]; then
  substep "Vundle files already installed. Skipping Installation."
else
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
fi
substep "Installing Plugins"
vim +PluginInstall +PluginClean +qall!

#-------------------------------------------------------------
# YouCompleteMe
#-------------------------------------------------------------
# step "Setting up YouCompleteMe"
# cd ~/.vim/bundle/YouCompleteMe && ./install.py --clang-completer --tern-completer && cd -

#-------------------------------------------------------------
# End
#-------------------------------------------------------------
exec $SHELL -l
step "Install script complete."
